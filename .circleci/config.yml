version: 2.1
commands:
  clone:
    description: "checkout a git repository"
    parameters:
      repo:
        type: string
      folder:
        type: string
    steps:
      - run:
          name: clone repository
          command: |
            if [ -d "<< parameters.folder >>" ]; then
              echo "folder already exist skipping << parameters.folder >>"
            else
              { # try
                  echo "Trying to clone identical branch name '$CIRCLE_BRANCH' from << parameters.repo >>."
                  git clone -b $CIRCLE_BRANCH --single-branch --depth=1 --recursive git@github.com:bloXroute-Labs/<< parameters.repo >>.git << parameters.folder >>
              } || { # catch
                  echo "Trying bxextensions master branch, could not find identical branch name '$CIRCLE_BRANCH'."
                  git clone -b master --single-branch --depth=1 --recursive git@github.com:bloXroute-Labs/<< parameters.repo >>.git << parameters.folder >>
              }
              cd << parameters.folder >>
              echo "Resolved branch $(git rev-parse --abbrev-ref HEAD) for << parameters.folder >>."
              echo "$(git rev-parse HEAD)" > ~/ws/<< parameters.folder >>_tmp_file
            fi
executors:
  bloxroute-executor:
    docker:
      - image: circleci/python:3.8
    environment:
      PYTHONPATH: /home/circleci/ws/bxcommon/src:/home/circleci/ws/bxextensions:/home/circleci/ws/bxcommon-internal/src/
      GIT_SSH_COMMAND: "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
    working_directory: ~/ws

jobs:
  initialize:
    executor: bloxroute-executor
    steps:
      - attach_workspace:
          at: ~/ws
      - checkout:
          path:
            "bxcommon"
      - run: # install and activate virtual environment with pip
          command: |
            cd ~/ws
            python -m virtualenv venv
      - clone:
          repo: bxextensions
          folder: bxextensions
      - restore_cache: # restores saved dependency cache
          key: bxextensions-{{ checksum "~/ws/bxextensions_tmp_file" }}
      - restore_cache: # restores saved dependency cache
          key: "bxcommon-{{ checksum \"bxcommon/requirements.txt\" }}-\
            {{ checksum \"bxcommon/requirements-dev.txt\" }}-\
            {{ checksum \"bxcommon/requirements-optional.txt\" }}"
      - run: # install and activate virtual environment with pip
          command: |
            cd ~/ws
            . venv/bin/activate
            pip install -r bxcommon/requirements.txt \
                        -r bxcommon/requirements-dev.txt 
       - run:
          command: |
            sudo apt update &&
            sudo apt install build-essential automake autogen autoconf libtool libtool-bin libssl-dev cmake linux-headers-amd64
            . venv/bin/activate
            cd bxextensions
            python build_extensions.py
      - save_cache: # special step to save dependency cache
          key: "bxcommon-{{ checksum \"bxcommon/requirements.txt\" }}-\
            {{ checksum \"bxcommon/requirements-dev.txt\" }}-\
            {{ checksum \"bxcommon/requirements-optional.txt\" }}"
          paths:
            - "venv"
      - save_cache: # special step to save dependency cache
          key: bxextensions-{{ checksum "~/ws/bxextensions_tmp_file" }}
          paths:
            - "bxextensions"
      - persist_to_workspace:
          root: .
          paths:
            - venv
            - bxcommon
            - bxextensions

  check:
    executor: bloxroute-executor
    steps:
      - attach_workspace:
          at: ~/ws
      - run: # run pylint
          name: Lint Score
          command: |
            . venv/bin/activate
            cd bxcommon
            pylint src/bxcommon --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" --rcfile=pylintrc
      - run:
          name: Static Analysis
          command: |
            . venv/bin/activate
            cd bxcommon
            # remove dev configuration
            rm .pyre_configuration
            pyre --local-configuration .pyre_configuration.circle check
  test:
    executor: bloxroute-executor
    steps:
      - attach_workspace:
          at: ~/ws
      - run:
          name: Unit Tests
          command: |
            . venv/bin/activate
            cd bxcommon/test/unit
            python -m unittest discover --verbose
      - run:
          name: Integration Tests
          command: |
            . venv/bin/activate
            cd bxcommon/test/integration
            python -m unittest discover --verbose
      - run:
          name: Check Coverage
          command: |
            . venv/bin/activate
            cd bxcommon/test/unit
            coverage run --source=../../src -m unittest discover && coverage report --fail-under=01
      - store_artifacts:
          path: test-reports/
          destination: tr1
  build:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - attach_workspace:
          at: ~/ws
      - run:
          name: Package
          command: 'echo "Yay build!"'

workflows:
  version: 2

  test-build:
    jobs:
      - initialize
      - check:
          requires:
            - initialize
      - test:
          requires:
            - initialize
      - build:
          requires:
            - initialize
          filters:
            branches:
              only: master
